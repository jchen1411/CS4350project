package PomonaTransitSystem;

import java.sql.*;
import java.util.Scanner;
import java.text.ParseException;
import java.text.SimpleDateFormat;


public class PomonaTransitSystem {
    public static void main(String[] args) {
        System.out.println("Connecting to MS Access database...");

        // Check connectivity
        if (DatabaseConnectivity.checkConnection()) {
            System.out.println("Connection successful.");
            
            TripSchedule.displaySchedule("LA", "NY", "2024-8-2");//correct format "YYYY-MM-DD"
            System.out.println(); 
            
            Scanner scanner = new Scanner(System.in);
            TripOfferingEditor editor = new TripOfferingEditor();
            while (true) {
                System.out.println("Pomona Transit System - Choose an option:");
                System.out.println("1. View trip schedule");
                System.out.println("2. Delete a trip offering");
                System.out.println("3. Add new trip offerings");
                System.out.println("4. Change driver for a trip offering");
                System.out.println("5. Change bus for a trip offering");
                System.out.println("6. Exit");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine();  

                switch (choice) {
                    case 1:
                        System.out.println("Enter Start Location Name:");
                        String startLocationName = scanner.nextLine();
                        System.out.println("Enter Destination Name:");
                        String destinationName = scanner.nextLine();
                        System.out.println("Enter Date (YYYY-MM-DD):");
                        String date = scanner.nextLine();
                        TripSchedule.displaySchedule(startLocationName, destinationName, date);
                        break;
                    case 2:
                        System.out.println("Enter TripNumber to delete:");
                        int tripNumberToDelete = scanner.nextInt();
                        scanner.nextLine();  
                        System.out.println("Enter Date to delete (YYYY-MM-DD):");
                        String dateToDelete = scanner.nextLine();
                        System.out.println("Enter ScheduledStartTime to delete (HH:MM:SS):");
                        String startTimeToDelete = scanner.nextLine();
                        editor.deleteTripOffering(tripNumberToDelete, dateToDelete, startTimeToDelete);
                        break;
                    case 3:
                        editor.addTripOfferings();
                        break;
                    case 4:
                        System.out.println("Enter TripNumber to change driver:");
                        int tripNumberToChangeDriver = scanner.nextInt();
                        scanner.nextLine();  
                        System.out.println("Enter Date to change driver (YYYY-MM-DD):");
                        String dateToChangeDriver = scanner.nextLine();
                        System.out.println("Enter ScheduledStartTime to change driver (HH:MM:SS):");
                        String startTimeToChangeDriver = scanner.nextLine();
                        System.out.println("Enter new DriverName:");
                        String newDriverName = scanner.nextLine();
                        editor.changeDriver(tripNumberToChangeDriver, dateToChangeDriver, startTimeToChangeDriver, newDriverName);
                        break;
                    case 5:
                        System.out.println("Enter TripNumber to change bus:");
                        int tripNumberToChangeBus = scanner.nextInt();
                        scanner.nextLine(); 
                        System.out.println("Enter Date to change bus (YYYY-MM-DD):");
                        String dateToChangeBus = scanner.nextLine();
                        System.out.println("Enter ScheduledStartTime to change bus (HH:MM:SS):");
                        String startTimeToChangeBus = scanner.nextLine();
                        System.out.println("Enter new BusID:");
                        int newBusID = scanner.nextInt();
                        scanner.nextLine();  
                        editor.changeBus(tripNumberToChangeBus, dateToChangeBus, startTimeToChangeBus, newBusID);
                        break;
                    case 6:
                        System.out.println("Exiting...");
                        scanner.close();
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        } else {
            System.out.println("Failed to connect to the database.");
        }
    }

    // Inner class for checking database connectivity
    static class DatabaseConnectivity {
        private static final String DATABASE_URL = "jdbc:ucanaccess://./resources/pomonaTransitSystem.accdb";

        public static boolean checkConnection() {
            try (Connection connection = DriverManager.getConnection(DATABASE_URL)) {
                return connection != null;
            } catch (SQLException e) {
                e.printStackTrace();
                return false;
            }
        }
    }

    // Inner class for database utility functions
    //test
    /**static class DatabaseUtility {
        private static final String DATABASE_URL = "jdbc:ucanaccess://./resources/pomonaTransitSystem.accdb";
        public static void displayTableContents(String tableName) {
            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery("SELECT * FROM " + tableName)) {
                while (resultSet.next()) {
                    int id = resultSet.getInt("TripNumber");
                    String name = resultSet.getString("StartLocationName");
                    System.out.println("ID: " + id + ", Name: " + name);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }**/
    
    //Task 1: 
    static class TripSchedule {
        private static final String DATABASE_URL = "jdbc:ucanaccess://./resources/pomonaTransitSystem.accdb";
        
        public static void displaySchedule(String startLocationName, String destinationName, String date) {
            String query = "SELECT TripOffering.TripNumber, TripOffering.Date, TripOffering.ScheduledStartTime, TripOffering.ScheduledArrivalTime, " +
                    "TripOffering.DriverName, TripOffering.BusID " +
                    "FROM TripOffering " +
                    "JOIN Trip ON TripOffering.TripNumber = Trip.TripNumber " +
                    "WHERE Trip.StartLocationName = ? AND Trip.DestinationName = ? AND TripOffering.Date = ?";

            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 PreparedStatement preparedStatement = connection.prepareStatement(query)) {

                preparedStatement.setString(1, startLocationName);
                preparedStatement.setString(2, destinationName);
                preparedStatement.setDate(3, Date.valueOf(date));

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    System.out.println("Schedule for trips from " + startLocationName + " to " + destinationName + " on " + date + ":");

                    boolean hasResults = false;
                    while (resultSet.next()) {
                        hasResults = true;
                        int tripNumber = resultSet.getInt("TripNumber");
                        String scheduledStartTime = resultSet.getString("ScheduledStartTime").split("\\.")[0];
                        String scheduledArrivalTime = resultSet.getString("ScheduledArrivalTime").split("\\.")[0];
                        String driverName = resultSet.getString("DriverName");
                        int busID = resultSet.getInt("BusID");

                        System.out.println("TripNumber: " + tripNumber + ", ScheduledStartTime: " + scheduledStartTime +
                                ", ScheduledArrivalTime: " + scheduledArrivalTime + ", DriverName: " + driverName + ", BusID: " + busID);
                    }
                    if (!hasResults) {
                        System.out.println("No trips found for the given criteria.");
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    static class TripOfferingEditor {
        private static final String DATABASE_URL = "jdbc:ucanaccess://./resources/pomonaTransitSystem.accdb";

        public void deleteTripOffering(int tripNumber, String date, String scheduledStartTime) {
            String deleteQuery = "DELETE FROM TripOffering WHERE TripNumber = ? AND Date = ? AND ScheduledStartTime = ?";

            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery)) {

                preparedStatement.setInt(1, tripNumber);
                preparedStatement.setDate(2, Date.valueOf(date));
                preparedStatement.setTime(3, Time.valueOf(scheduledStartTime));

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("Trip offering deleted successfully.");
                } else {
                    System.out.println("No matching trip offering found.");
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public void addTripOfferings() {
            Scanner scanner = new Scanner(System.in);
            boolean moreTrips = true;

            while (moreTrips) {
                System.out.println("Enter TripNumber:");
                int tripNumber = scanner.nextInt();
                scanner.nextLine(); 
                System.out.println("Enter Date (YYYY-MM-DD):");
                String date = scanner.nextLine();
                System.out.println("Enter ScheduledStartTime (HH:MM:SS):");
                String scheduledStartTime = scanner.nextLine();
                System.out.println("Enter ScheduledArrivalTime (HH:MM:SS):");
                String scheduledArrivalTime = scanner.nextLine();
                System.out.println("Enter DriverName:");
                String driverName = scanner.nextLine();
                System.out.println("Enter BusID:");
                int busID = scanner.nextInt();
                scanner.nextLine(); 

                String insertQuery = "INSERT INTO TripOffering (TripNumber, Date, ScheduledStartTime, ScheduledArrivalTime, DriverName, BusID) " +
                        "VALUES (?, ?, ?, ?, ?, ?)";

                try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                     PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {

                    preparedStatement.setInt(1, tripNumber);
                    preparedStatement.setDate(2, Date.valueOf(date));
                    preparedStatement.setTime(3, Time.valueOf(scheduledStartTime));
                    preparedStatement.setTime(4, Time.valueOf(scheduledArrivalTime));
                    preparedStatement.setString(5, driverName);
                    preparedStatement.setInt(6, busID);

                    int rowsAffected = preparedStatement.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Trip offering added successfully.");
                    } else {
                        System.out.println("Failed to add trip offering.");
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                }

                System.out.println("Do you want to add more trips? (yes/no):");
                String response = scanner.nextLine();
                moreTrips = response.equalsIgnoreCase("yes");
            }
        }

        public void changeDriver(int tripNumber, String date, String scheduledStartTime, String newDriverName) {
            String updateQuery = "UPDATE TripOffering SET DriverName = ? WHERE TripNumber = ? AND Date = ? AND ScheduledStartTime = ?";

            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {

                preparedStatement.setString(1, newDriverName);
                preparedStatement.setInt(2, tripNumber);
                preparedStatement.setDate(3, Date.valueOf(date));
                preparedStatement.setTime(4, Time.valueOf(scheduledStartTime));

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("Driver changed successfully.");
                } else {
                    System.out.println("No matching trip offering found.");
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public void changeBus(int tripNumber, String date, String scheduledStartTime, int newBusID) {
            String updateQuery = "UPDATE TripOffering SET BusID = ? WHERE TripNumber = ? AND Date = ? AND ScheduledStartTime = ?";

            try (Connection connection = DriverManager.getConnection(DATABASE_URL);
                 PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {

                preparedStatement.setInt(1, newBusID);
                preparedStatement.setInt(2, tripNumber);
                preparedStatement.setDate(3, Date.valueOf(date));
                preparedStatement.setTime(4, Time.valueOf(scheduledStartTime));

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("Bus changed successfully.");
                } else {
                    System.out.println("No matching trip offering found.");
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    
    
}